// Copyright 2022 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$ABC = "01234567456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ADD", "DIV", "MAX", "MIN", "MUL", "SUB", "SQRDIFF"]
$assert ACTIVATION in ["LINEAR", "MINMAX"]
#include <assert.h>
$if ACTIVATION == "MINMAX":
  #include <string.h>

#include <arm_fp16.h>

#include <xnnpack/common.h>
#include <xnnpack/vbinary.h>


$VOPH_F16 = {
$  "ADD": lambda x, y: "vaddh_f16(%s, %s)" % (x, y),
$  "DIV": lambda x, y: "vdivh_f16(%s, %s)" % (x, y),
$  "MAX": lambda x, y: "vmaxh_f16(%s, %s)" % (x, y),
$  "MIN": lambda x, y: "vminh_f16(%s, %s)" % (x, y),
$  "MUL": lambda x, y: "vmulh_f16(%s, %s)" % (x, y),
$  "SUB": lambda x, y: "vsubh_f16(%s, %s)" % (x, y),
$  "SQRDIFF": lambda x, y: "vsubh_f16(%s, %s)" % (x, y),
$}[OP]
$SUFFIX = {"LINEAR": "", "MINMAX": "_minmax"}[ACTIVATION]
$PARAMS = {"LINEAR": "xnn_f16_default_params", "MINMAX": "xnn_f16_minmax_params"}[ACTIVATION]
void xnn_f16_v${OP.lower()}${SUFFIX}_ukernel__fp16arith_x${BATCH_TILE}(
    size_t n,
    const void* restrict a_ptr,
    const void* restrict b_ptr,
    void* restrict y_ptr,
    const union ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(n != 0);
  assert(n % sizeof(float16_t) == 0);
  assert(a_ptr != NULL);
  assert(b_ptr != NULL);
  assert(y_ptr != NULL);

  const float16_t* a = (const float16_t*) a_ptr;
  const float16_t* b = (const float16_t*) b_ptr;
  float16_t* y = (float16_t*) y_ptr;

  $if ACTIVATION == "MINMAX":
    float16_t vy_min, vy_max;
    memcpy(&vy_min, &params->fp16arith.min, sizeof(vy_min));
    memcpy(&vy_max, &params->fp16arith.max, sizeof(vy_max));

  $if BATCH_TILE > 1:
    for (; n >= ${BATCH_TILE} * sizeof(float16_t); n -= ${BATCH_TILE} * sizeof(float16_t)) {
      $for N in range(BATCH_TILE):
        const float16_t va${ABC[N]} = *a++;

      $for N in range(BATCH_TILE):
        const float16_t vb${ABC[N]} = *b++;

      $for N in range(BATCH_TILE):
        float16_t vacc${ABC[N]} = ${VOPH_F16("va" + ABC[N], "vb" + ABC[N])};

      $if OP == "SQRDIFF":
        $for N in range(BATCH_TILE):
          vacc${ABC[N]} = vmulh_f16(vacc${ABC[N]}, vacc${ABC[N]});

      $if ACTIVATION == "MINMAX":
        $for N in range(BATCH_TILE):
          vacc${ABC[N]} = vmaxh_f16(vacc${ABC[N]}, vy_min);

        $for N in range(BATCH_TILE):
          vacc${ABC[N]} = vminh_f16(vacc${ABC[N]}, vy_max);

      $for N in range(BATCH_TILE):
        *y++ = vacc${ABC[N]};
    }
    if XNN_UNLIKELY(n != 0) {
      $if BATCH_TILE > 2:
        do {
          const float16_t va = *a++;
          const float16_t vb = *b++;
          float16_t vacc = ${VOPH_F16("va", "vb")};
          $if OP == "SQRDIFF":
            vacc = vmulh_f16(vacc, vacc);
          $if ACTIVATION == "MINMAX":
            vacc = vmaxh_f16(vacc, vy_min);
            vacc = vminh_f16(vacc, vy_max);
          *y++ = vacc;
          n -= sizeof(float16_t);
        } while (n != 0);
      $else:
        const float16_t va = *a;
        const float16_t vb = *b;
        float16_t vacc = ${VOPH_F16("va", "vb")};
        $if OP == "SQRDIFF":
          vacc = vmulh_f16(vacc, vacc);
        $if ACTIVATION == "MINMAX":
          vacc = vmaxh_f16(vacc, vy_min);
          vacc = vminh_f16(vacc, vy_max);
        *y = vacc;
    }
  $else:
    do {
      const float16_t va = *a++;
      const float16_t vb = *b++;
      float16_t vacc = ${VOPH_F16("va", "vb")};
      $if OP == "SQRDIFF":
        vacc = vmulh_f16(vacc, vacc);
      $if ACTIVATION == "MINMAX":
        vacc = vmaxh_f16(vacc, vy_min);
        vacc = vminh_f16(vacc, vy_max);
      *y++ = vacc;
      n -= sizeof(float16_t);
    } while (n != 0);
}
