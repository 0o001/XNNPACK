// Copyright 2022 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE >= 1
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <xnnpack/math.h>
#include <xnnpack/window.h>


void xnn_s16_window_ukernel__scalar_x${CHANNEL_TILE}(
    size_t rows,
    size_t channels,
    const int16_t* input,
    const int16_t* weights,
    uint32_t shift,
    int16_t* output) {

  assert(rows > 0);
  assert(channels > 0);
  assert(input != NULL);
  assert(weights != NULL);
  assert(shift < 32);
  assert(output != NULL);

  do {
    const int16_t* w = weights;
    size_t c = channels;
    $if CHANNEL_TILE > 1:
      for (; c >= ${CHANNEL_TILE}; c -= ${CHANNEL_TILE}) {
        $for C in range(CHANNEL_TILE):
          const int16_t vi${C} = input[${C}];
        input += ${CHANNEL_TILE};

        $for C in range(CHANNEL_TILE):
          const int16_t w${C} = w[${C}];
        w += ${CHANNEL_TILE};

        $for C in range(CHANNEL_TILE):
          int32_t vout${C} = (int32_t) vi${C} * (int32_t) w${C};

        $for C in range(CHANNEL_TILE):
          vout${C} = asr_s32(vout${C}, shift);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_max_s32(vout${C}, INT16_MIN);

        $for C in range(CHANNEL_TILE):
          vout${C} = math_min_s32(vout${C}, INT16_MAX);

        $for C in range(CHANNEL_TILE):
          output[${C}] = (int16_t)(vout${C});

        output += ${CHANNEL_TILE};
      }

    if XNN_UNLIKELY(c != 0) {
      do {
        int32_t vout = ((int32_t) input[0] * (int32_t) w[0]);
        ++input;
        ++w;
        vout = asr_s32(vout, shift);
        vout = math_max_s32(vout, INT16_MIN);
        vout = math_min_s32(vout, INT16_MAX);
        output[0] = (int16_t)(vout);
        ++output;
      } while (--c != 0);
    }
  } while (--rows != 0);
}
