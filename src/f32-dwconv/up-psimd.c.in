// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CR == 4
$assert MR >= 2
$assert AR >= 1
#include <assert.h>

#include <psimd.h>

#include <xnnpack/dwconv.h>


void xnn_f32_dwconv_ukernel_up${CR}x${MR}__psimd(
    size_t channels,
    size_t output_width,
    const float** input,
    const float* weights,
    float* output,
    size_t input_stride,
    size_t output_increment,
    const union xnn_f32_output_params params[restrict static 1])
{
  assert(channels != 0);
  assert(output_width != 0);

  const psimd_f32 vmax = psimd_load_splat_f32(&params->scalar.max);
  const psimd_f32 vmin = psimd_load_splat_f32(&params->scalar.min);
  do {
    $for M in range(MR):
      const float* i${M} = input[${M}];
    input = (const float**) ((uintptr_t) input + input_stride);

    size_t c = channels;
    const float* w = weights;
    for (; c >= 4; c -= 4) {
      psimd_f32 vacc0 = psimd_load_f32(w);
      $for M in range(MR):

        const psimd_f32 vi${M} = psimd_load_f32(i${M});
        const psimd_f32 vk${M} = psimd_load_f32(w + ${(M+1) * CR});
        $if 1 <= M < AR:
          psimd_f32 vacc${M} = psimd_mul_f32(vi${M}, vk${M});
        $else:
          vacc${M % AR} = psimd_qfma_f32(vacc${M % AR}, vi${M}, vk${M});
        i${M} += ${CR};

      w += ${(MR + 1) * CR};

      $STEPA = 1
      $while STEPA < AR:
        $for A in range(0, AR, STEPA * 2):
          $if A + STEPA < AR:
            vacc${A} = psimd_add_f32(vacc${A}, vacc${A + STEPA});
        $STEPA *= 2

      vacc0 = psimd_max_f32(vacc0, vmin);
      vacc0 = psimd_min_f32(vacc0, vmax);

      psimd_store_f32(output, vacc0);
      output += ${CR};
    }
    if XNN_UNLIKELY(c != 0) {
      psimd_f32 vacc = psimd_load_f32(w);
      $for M in range(MR):

        const psimd_f32 vi${M} = psimd_load_f32(i${M});
        const psimd_f32 vk${M} = psimd_load_f32(w + ${(M+1) * CR});
        vacc = psimd_qfma_f32(vacc, vi${M}, vk${M});

      w += ${(MR + 1) * CR};

      vacc = psimd_max_f32(vacc, vmin);
      vacc = psimd_min_f32(vacc, vmax);

      if (c & 2) {
        psimd_store2_f32(output, vacc);
        vacc = psimd_concat_hi_f32(vacc, vacc);
        output += 2;
      }
      if (c & 1) {
        psimd_store1_f32(output, vacc);
        output += 1;
      }
    }

    output = (float*) ((uintptr_t) output + output_increment);
  } while (--output_width != 0);
}
