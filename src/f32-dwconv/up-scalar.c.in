// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CR == 1
$assert MR >= 2
$assert AR >= 1
#include <assert.h>

#include <xnnpack/dwconv.h>
#include <xnnpack/math.h>


void xnn_f32_dwconv_ukernel_up${CR}x${MR}__scalar(
    size_t channels,
    size_t output_width,
    const float** input,
    const float* weights,
    float* output,
    size_t input_stride,
    size_t output_increment,
    const union xnn_f32_output_params params[restrict static 1])
{
  assert(channels != 0);
  assert(output_width != 0);

  const float vmin = params->scalar.min;
  const float vmax = params->scalar.max;
  do {
    $for M in range(MR):
      const float* i${M} = input[${M}];
    input = (const float**) ((uintptr_t) input + input_stride);

    size_t c = channels;
    const float* w = weights;
    do {
      float vacc0 = w[0];
      $for M in range(MR):

        const float vi${M} = *i${M}++;
        const float vk${M} = w[${M+1}];
        $if 1 <= M < AR:
          float vacc${M} = vi${M} * vk${M};
        $else:
          vacc${M % AR} += vi${M} * vk${M};

      w += ${MR + 1};

      $STEPA = 1
      $while STEPA < AR:
        $for A in range(0, AR, STEPA * 2):
          $if A + STEPA < AR:
            vacc${A} += vacc${A + STEPA};
        $STEPA *= 2

      vacc0 = math_max_f32(vacc0, vmin);
      vacc0 = math_min_f32(vacc0, vmax);

      *output++ = vacc0;
    } while (--c != 0);

    output = (float*) ((uintptr_t) output + output_increment);
  } while (--output_width != 0);
}
