// Copyright 2020 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert ROW_TILE >= 1
$assert ACCUMULATORS >= 1
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/dwconv.h>
#include <xnnpack/math.h>


void xnn_f16_dwconv2d_chw_ukernel_5x5p2__neonfp16arith_${ROW_TILE}x8${"_acc%d" % ACCUMULATORS if ACCUMULATORS > 1 else ""}(
    size_t input_height,
    size_t input_width,
    const void* input,
    const void* weights,
    const void* zero,
    void* output,
    uint32_t padding_top,
    const union xnn_f16_chw_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(input_height != 0);
  assert(input_width != 0);
  assert(input_width % sizeof(__fp16) == 0);
  assert(padding_top == 2);

  const uint16x8_t vmask = vld1q_u16(params->neonfp16arith.mask);
  const float16x8_t vmax = vld1q_dup_f16(&params->neonfp16arith.max);
  const float16x8_t vmin = vld1q_dup_f16(&params->neonfp16arith.min);

  const __fp16* w0 = (const __fp16*)weights;
  const float16x8_t vw01234567 = vld1q_f16(w0);
  const float16x8_t vw89ABCDEF = vld1q_f16(w0 + 8);
  const float16x8_t vwGHIJKLMN = vld1q_f16(w0 + 16);
  const float16x4_t vwOP = vreinterpret_f16_u32(vld1_dup_u32((const void*)(w0 + 24)));

  const size_t input_decrement = round_up_po2(input_width, 8 * sizeof(__fp16));

  const __fp16* i0 = zero;
  const __fp16* i1 = zero;
  const __fp16* i2 = input;
  $for M in range(3, 4 + ROW_TILE):
    const __fp16* i${M} = (const __fp16*) ((uintptr_t) i${M-1} + input_width);

  __fp16* o0 = output;
  $for M in range(1, ROW_TILE):
    __fp16* o${M} = (__fp16*) ((uintptr_t) o${M-1} + input_width);

  size_t output_height = input_height;
  do {
    $for M in range(2, 3 + ROW_TILE):
      if XNN_UNPREDICTABLE(output_height < ${M}) {
        i${M+1} = zero;
        $if M <= ROW_TILE:
          o${M-1} = o${M-2};
      }

    $for M in range(4 + ROW_TILE):
      float16x8_t vi${M}x0123 = vmovq_n_f16(0);

    $for M in range(4 + ROW_TILE):
      float16x8_t vi${M}x4567 = vld1q_f16(i${M}); i${M} += 8;

    size_t w = input_width;
    for (; w > 16 * sizeof(__fp16); w -= 8 * sizeof(__fp16)) {
      $for M in range(ROW_TILE):
        float16x8_t vo${M}p0 = vdupq_laneq_f16(vw01234567, 0);

      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x89AB = vld1q_f16(i${M}); i${M} += 8;

      // Center column
      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 1:
          float16x8_t vo${M}p1 = vmulq_laneq_f16(vi${M}x4567, vw01234567, 3);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M}x4567, vw01234567, 3);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 2:
          float16x8_t vo${M}p2 = vmulq_laneq_f16(vi${M+1}x4567, vw89ABCDEF, 0);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M+1}x4567, vw89ABCDEF, 0);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 3:
          float16x8_t vo${M}p3 = vmulq_laneq_f16(vi${M+2}x4567, vw89ABCDEF, 5);
        $else:
          vo${M}p${4 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${4 % ACCUMULATORS}, vi${M+2}x4567, vw89ABCDEF, 5);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 4:
          float16x8_t vo${M}p4 = vmulq_laneq_f16(vi${M+3}x4567, vwGHIJKLMN, 2);
        $else:
          vo${M}p${5 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${5 % ACCUMULATORS}, vi${M+3}x4567, vwGHIJKLMN, 2);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 6:
          float16x8_t vo${M}p5 = vmulq_laneq_f16(vi${M+4}x4567, vwGHIJKLMN, 7);
        $else:
          vo${M}p${6 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${6 % ACCUMULATORS}, vi${M+4}x4567, vwGHIJKLMN, 7);

      // Left by 1 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x3456 = vextq_f16(vi${M}x0123, vi${M}x4567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${7 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${7 % ACCUMULATORS}, vi${M}x3456, vw01234567, 2);

      $for M in range(ROW_TILE):
        vo${M}p${8 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${8 % ACCUMULATORS}, vi${M+1}x3456, vw01234567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${9 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${9 % ACCUMULATORS}, vi${M+2}x3456, vw89ABCDEF, 4);

      $for M in range(ROW_TILE):
        vo${M}p${10 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${10 % ACCUMULATORS}, vi${M+3}x3456, vwGHIJKLMN, 1);

      $for M in range(ROW_TILE):
        vo${M}p${11 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${11 % ACCUMULATORS}, vi${M+4}x3456, vwGHIJKLMN, 6);

      // Left by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x2345 = vextq_f16(vi${M}x0123, vi${M}x4567, 6);
        vi${M}x0123 = vi${M}x4567;

      $for M in range(ROW_TILE):
        vo${M}p${12 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${12 % ACCUMULATORS}, vi${M}x2345, vw01234567, 1);

      $for M in range(ROW_TILE):
        vo${M}p${13 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${13 % ACCUMULATORS}, vi${M+1}x2345, vw01234567, 6);

      $for M in range(ROW_TILE):
        vo${M}p${14 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${14 % ACCUMULATORS}, vi${M+2}x2345, vw89ABCDEF, 3);

      $for M in range(ROW_TILE):
        vo${M}p${15 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${15 % ACCUMULATORS}, vi${M+3}x2345, vwGHIJKLMN, 0);

      $for M in range(ROW_TILE):
        vo${M}p${16 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${16 % ACCUMULATORS}, vi${M+4}x2345, vwGHIJKLMN, 5);

      // Right by 1 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x5678 = vextq_f16(vi${M}x4567, vi${M}x89AB, 1);

      $for M in range(ROW_TILE):
        vo${M}p${17 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${17 % ACCUMULATORS}, vi${M}x5678, vw01234567, 4);

      $for M in range(ROW_TILE):
        vo${M}p${18 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${18 % ACCUMULATORS}, vi${M+1}x5678, vw89ABCDEF, 1);

      $for M in range(ROW_TILE):
        vo${M}p${19 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${19 % ACCUMULATORS}, vi${M+2}x5678, vw89ABCDEF, 6);

      $for M in range(ROW_TILE):
        vo${M}p${20 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${20 % ACCUMULATORS}, vi${M+3}x5678, vwGHIJKLMN, 3);

      $for M in range(ROW_TILE):
        vo${M}p${21 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${21 % ACCUMULATORS}, vi${M+4}x5678, vwOP, 0);

      // Right by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x6789 = vextq_f16(vi${M}x4567, vi${M}x89AB, 2);
        vi${M}x4567 = vi${M}x89AB;

      $for M in range(ROW_TILE):
        vo${M}p${22 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${22 % ACCUMULATORS}, vi${M}x6789, vw01234567, 5);

      $for M in range(ROW_TILE):
        vo${M}p${23 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${23 % ACCUMULATORS}, vi${M+1}x6789, vw89ABCDEF, 2);

      $for M in range(ROW_TILE):
        vo${M}p${24 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${24 % ACCUMULATORS}, vi${M+2}x6789, vw89ABCDEF, 7);

      $for M in range(ROW_TILE):
        vo${M}p${25 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${25 % ACCUMULATORS}, vi${M+3}x6789, vwGHIJKLMN, 4);

      $for M in range(ROW_TILE):
        vo${M}p${26 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${26 % ACCUMULATORS}, vi${M+4}x6789, vwOP, 1);

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} = vaddq_f16(vo${M}p${A}, vo${M}p${A + ACC_SLICE});
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float16x8_t vo${M} = vmaxq_f16(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = vminq_f16(vo${M}, vmax);

      $for M in reversed(range(ROW_TILE)):
        vst1q_f16(o${M}, vo${M}); o${M} += 8;
    }

    // Always process the last block of 5..16 pixels.
    assert(w <= 16 * sizeof(__fp16));
    if XNN_LIKELY(w > 8 * sizeof(__fp16)) {
      $for M in range(ROW_TILE):
        float16x8_t vo${M}p0 = vdupq_laneq_f16(vw01234567, 0);

      $for M in range(4 + ROW_TILE):
        float16x8_t vi${M}x89AB = vld1q_f16(i${M}); i${M} += 8;

      $for M in range(4 + ROW_TILE):
        vi${M}x89AB = vreinterpretq_f16_u16(vandq_u16(vmask, vreinterpretq_u16_f16(vi${M}x89AB)));

      // Center column
      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 1:
          float16x8_t vo${M}p1 = vmulq_laneq_f16(vi${M}x4567, vw01234567, 3);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M}x4567, vw01234567, 3);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 2:
          float16x8_t vo${M}p2 = vmulq_laneq_f16(vi${M+1}x4567, vw89ABCDEF, 0);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M+1}x4567, vw89ABCDEF, 0);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 3:
          float16x8_t vo${M}p3 = vmulq_laneq_f16(vi${M+2}x4567, vw89ABCDEF, 5);
        $else:
          vo${M}p${4 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${4 % ACCUMULATORS}, vi${M+2}x4567, vw89ABCDEF, 5);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 4:
          float16x8_t vo${M}p4 = vmulq_laneq_f16(vi${M+3}x4567, vwGHIJKLMN, 2);
        $else:
          vo${M}p${5 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${5 % ACCUMULATORS}, vi${M+3}x4567, vwGHIJKLMN, 2);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 6:
          float16x8_t vo${M}p5 = vmulq_laneq_f16(vi${M+4}x4567, vwGHIJKLMN, 7);
        $else:
          vo${M}p${6 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${6 % ACCUMULATORS}, vi${M+4}x4567, vwGHIJKLMN, 7);

      // Left by 1 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x3456 = vextq_f16(vi${M}x0123, vi${M}x4567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${7 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${7 % ACCUMULATORS}, vi${M}x3456, vw01234567, 2);

      $for M in range(ROW_TILE):
        vo${M}p${8 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${8 % ACCUMULATORS}, vi${M+1}x3456, vw01234567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${9 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${9 % ACCUMULATORS}, vi${M+2}x3456, vw89ABCDEF, 4);

      $for M in range(ROW_TILE):
        vo${M}p${10 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${10 % ACCUMULATORS}, vi${M+3}x3456, vwGHIJKLMN, 1);

      $for M in range(ROW_TILE):
        vo${M}p${11 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${11 % ACCUMULATORS}, vi${M+4}x3456, vwGHIJKLMN, 6);

      // Left by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x2345 = vextq_f16(vi${M}x0123, vi${M}x4567, 6);
        vi${M}x0123 = vi${M}x4567;

      $for M in range(ROW_TILE):
        vo${M}p${12 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${12 % ACCUMULATORS}, vi${M}x2345, vw01234567, 1);

      $for M in range(ROW_TILE):
        vo${M}p${13 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${13 % ACCUMULATORS}, vi${M+1}x2345, vw01234567, 6);

      $for M in range(ROW_TILE):
        vo${M}p${14 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${14 % ACCUMULATORS}, vi${M+2}x2345, vw89ABCDEF, 3);

      $for M in range(ROW_TILE):
        vo${M}p${15 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${15 % ACCUMULATORS}, vi${M+3}x2345, vwGHIJKLMN, 0);

      $for M in range(ROW_TILE):
        vo${M}p${16 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${16 % ACCUMULATORS}, vi${M+4}x2345, vwGHIJKLMN, 5);

      // Right by 1 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x5678 = vextq_f16(vi${M}x4567, vi${M}x89AB, 1);

      $for M in range(ROW_TILE):
        vo${M}p${17 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${17 % ACCUMULATORS}, vi${M}x5678, vw01234567, 4);

      $for M in range(ROW_TILE):
        vo${M}p${18 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${18 % ACCUMULATORS}, vi${M+1}x5678, vw89ABCDEF, 1);

      $for M in range(ROW_TILE):
        vo${M}p${19 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${19 % ACCUMULATORS}, vi${M+2}x5678, vw89ABCDEF, 6);

      $for M in range(ROW_TILE):
        vo${M}p${20 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${20 % ACCUMULATORS}, vi${M+3}x5678, vwGHIJKLMN, 3);

      $for M in range(ROW_TILE):
        vo${M}p${21 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${21 % ACCUMULATORS}, vi${M+4}x5678, vwOP, 0);

      // Right by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x6789 = vextq_f16(vi${M}x4567, vi${M}x89AB, 2);
        vi${M}x4567 = vi${M}x89AB;

      $for M in range(ROW_TILE):
        vo${M}p${22 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${22 % ACCUMULATORS}, vi${M}x6789, vw01234567, 5);

      $for M in range(ROW_TILE):
        vo${M}p${23 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${23 % ACCUMULATORS}, vi${M+1}x6789, vw89ABCDEF, 2);

      $for M in range(ROW_TILE):
        vo${M}p${24 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${24 % ACCUMULATORS}, vi${M+2}x6789, vw89ABCDEF, 7);

      $for M in range(ROW_TILE):
        vo${M}p${25 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${25 % ACCUMULATORS}, vi${M+3}x6789, vwGHIJKLMN, 4);

      $for M in range(ROW_TILE):
        vo${M}p${26 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${26 % ACCUMULATORS}, vi${M+4}x6789, vwOP, 1);

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} = vaddq_f16(vo${M}p${A}, vo${M}p${A + ACC_SLICE});
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float16x8_t vo${M} = vmaxq_f16(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = vminq_f16(vo${M}, vmax);

      $for M in reversed(range(ROW_TILE)):
        vst1q_f16(o${M}, vo${M}); o${M} += 8;

      w -= 8 * sizeof(__fp16);
    }

    assert(w >= 1 * sizeof(__fp16));
    assert(w <= 8 * sizeof(__fp16));
    {
      $for M in range(ROW_TILE):
        float16x8_t vo${M}p0 = vdupq_laneq_f16(vw01234567, 0);

      $for M in range(4 + ROW_TILE):
        vi${M}x4567 = vreinterpretq_f16_u16(vandq_u16(vmask, vreinterpretq_u16_f16(vi${M}x4567)));

      // Center column
      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 1:
          float16x8_t vo${M}p1 = vmulq_laneq_f16(vi${M}x4567, vw01234567, 3);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M}x4567, vw01234567, 3);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 2:
          float16x8_t vo${M}p2 = vmulq_laneq_f16(vi${M+1}x4567, vw89ABCDEF, 0);
        $else:
          vo${M}p0 = vfmaq_laneq_f16(vo${M}p0, vi${M+1}x4567, vw89ABCDEF, 0);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 3:
          float16x8_t vo${M}p3 = vmulq_laneq_f16(vi${M+2}x4567, vw89ABCDEF, 5);
        $else:
          vo${M}p${4 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${4 % ACCUMULATORS}, vi${M+2}x4567, vw89ABCDEF, 5);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 4:
          float16x8_t vo${M}p4 = vmulq_laneq_f16(vi${M+3}x4567, vwGHIJKLMN, 2);
        $else:
          vo${M}p${5 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${5 % ACCUMULATORS}, vi${M+3}x4567, vwGHIJKLMN, 2);

      $for M in range(ROW_TILE):
        $if ACCUMULATORS > 6:
          float16x8_t vo${M}p5 = vmulq_laneq_f16(vi${M+4}x4567, vwGHIJKLMN, 7);
        $else:
          vo${M}p${6 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${6 % ACCUMULATORS}, vi${M+4}x4567, vwGHIJKLMN, 7);

      // Left by 1 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x3456 = vextq_f16(vi${M}x0123, vi${M}x4567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${7 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${7 % ACCUMULATORS}, vi${M}x3456, vw01234567, 2);

      $for M in range(ROW_TILE):
        vo${M}p${8 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${8 % ACCUMULATORS}, vi${M+1}x3456, vw01234567, 7);

      $for M in range(ROW_TILE):
        vo${M}p${9 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${9 % ACCUMULATORS}, vi${M+2}x3456, vw89ABCDEF, 4);

      $for M in range(ROW_TILE):
        vo${M}p${10 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${10 % ACCUMULATORS}, vi${M+3}x3456, vwGHIJKLMN, 1);

      $for M in range(ROW_TILE):
        vo${M}p${11 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${11 % ACCUMULATORS}, vi${M+4}x3456, vwGHIJKLMN, 6);

      // Left by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x2345 = vextq_f16(vi${M}x0123, vi${M}x4567, 6);

      $for M in range(ROW_TILE):
        vo${M}p${12 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${12 % ACCUMULATORS}, vi${M}x2345, vw01234567, 1);

      $for M in range(ROW_TILE):
        vo${M}p${13 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${13 % ACCUMULATORS}, vi${M+1}x2345, vw01234567, 6);

      $for M in range(ROW_TILE):
        vo${M}p${14 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${14 % ACCUMULATORS}, vi${M+2}x2345, vw89ABCDEF, 3);

      $for M in range(ROW_TILE):
        vo${M}p${15 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${15 % ACCUMULATORS}, vi${M+3}x2345, vwGHIJKLMN, 0);

      $for M in range(ROW_TILE):
        vo${M}p${16 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${16 % ACCUMULATORS}, vi${M+4}x2345, vwGHIJKLMN, 5);

      // Right by 1 column
      const float16x8_t vzero = vmovq_n_f16(0);
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x5678 = vextq_f16(vi${M}x4567, vzero, 1);

      $for M in range(ROW_TILE):
        vo${M}p${17 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${17 % ACCUMULATORS}, vi${M}x5678, vw01234567, 4);

      $for M in range(ROW_TILE):
        vo${M}p${18 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${18 % ACCUMULATORS}, vi${M+1}x5678, vw89ABCDEF, 1);

      $for M in range(ROW_TILE):
        vo${M}p${19 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${19 % ACCUMULATORS}, vi${M+2}x5678, vw89ABCDEF, 6);

      $for M in range(ROW_TILE):
        vo${M}p${20 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${20 % ACCUMULATORS}, vi${M+3}x5678, vwGHIJKLMN, 3);

      $for M in range(ROW_TILE):
        vo${M}p${21 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${21 % ACCUMULATORS}, vi${M+4}x5678, vwOP, 0);

      // Right by 2 column
      $for M in range(4 + ROW_TILE):
        const float16x8_t vi${M}x6789 = vextq_f16(vi${M}x5678, vzero, 1);

      $for M in range(ROW_TILE):
        vo${M}p${22 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${22 % ACCUMULATORS}, vi${M}x6789, vw01234567, 5);

      $for M in range(ROW_TILE):
        vo${M}p${23 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${23 % ACCUMULATORS}, vi${M+1}x6789, vw89ABCDEF, 2);

      $for M in range(ROW_TILE):
        vo${M}p${24 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${24 % ACCUMULATORS}, vi${M+2}x6789, vw89ABCDEF, 7);

      $for M in range(ROW_TILE):
        vo${M}p${25 % ACCUMULATORS} = vfmaq_laneq_f16(vo${M}p${25 % ACCUMULATORS}, vi${M+3}x6789, vwGHIJKLMN, 4);

      $for M in range(ROW_TILE):
        vo${M}p${26 % ACCUMULATORS} = vfmaq_lane_f16(vo${M}p${26 % ACCUMULATORS}, vi${M+4}x6789, vwOP, 1);

      $if ACCUMULATORS > 1:
        $ACC_SLICE = 1
        $while ACC_SLICE < ACCUMULATORS:
          $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
            $if A + ACC_SLICE < ACCUMULATORS:
              $for M in range(ROW_TILE):
                vo${M}p${A} = vaddq_f16(vo${M}p${A}, vo${M}p${A + ACC_SLICE});
          $ACC_SLICE *= 2

      $for M in range(ROW_TILE):
        float16x8_t vo${M} = vmaxq_f16(vo${M}p0, vmin);

      $for M in range(ROW_TILE):
        vo${M} = vminq_f16(vo${M}, vmax);

      if XNN_LIKELY(w == 8 * sizeof(__fp16)) {
        $for M in reversed(range(ROW_TILE)):
          vst1q_f16(o${M}, vo${M}); o${M} += 8;
      } else {
        $for M in reversed(range(ROW_TILE)):
          float16x4_t vo${M}_lo = vget_low_f16(vo${M});

        if (w & (4 * sizeof(__fp16))) {
         $for M in reversed(range(ROW_TILE)):
            vst1_f16(o${M}, vo${M}_lo); o${M} += 4;

          $for M in reversed(range(ROW_TILE)):
            vo${M}_lo = vget_high_f16(vo${M});
        }
        if (w & (2 * sizeof(__fp16))) {
          $for M in reversed(range(ROW_TILE)):
            vst1_lane_u32((void*) o${M}, vreinterpret_u32_f16(vo${M}_lo), 0); o${M} += 2;

          $for M in range(ROW_TILE):
            vo${M}_lo = vext_f16(vo${M}_lo, vo${M}_lo, 2);
        }
        if (w & (1 * sizeof(__fp16))) {
          $for M in reversed(range(ROW_TILE)):
            vst1_lane_f16(o${M}, vo${M}_lo, 0); o${M} += 1;
        }
      }
    }

    i0 = (const __fp16*) ((uintptr_t) i${ROW_TILE} - input_decrement);
    i1 = (const __fp16*) ((uintptr_t) i${ROW_TILE+1} - input_decrement);
    $for M in range(2, 4 + ROW_TILE):
      i${M} = (const __fp16*) ((uintptr_t) i${M-1} + input_width);

    $if ROW_TILE > 1:
      o0 = o${ROW_TILE - 1};
      $for M in range(1, ROW_TILE):
        o${M} = (__fp16*) ((uintptr_t) o${M-1} + input_width);

    $if ROW_TILE > 1:
      output_height = doz(output_height, ${ROW_TILE});
  } while (${"--" if ROW_TILE == 1 else ""}output_height != 0);
}
