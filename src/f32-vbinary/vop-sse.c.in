// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ADD", "DIV", "MAX", "MIN", "MUL", "SUB", "SQRDIFF"]
$assert ACTIVATION in ["LINEAR", "MINMAX"]
#include <assert.h>

#include <xmmintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/vbinary.h>


$_MM_OP_PS = {
$  "ADD": "_mm_add_ps",
$  "DIV": "_mm_div_ps",
$  "MAX": "_mm_max_ps",
$  "MIN": "_mm_min_ps",
$  "MUL": "_mm_mul_ps",
$  "SUB": "_mm_sub_ps",
$  "SQRDIFF": "_mm_sub_ps",
$}[OP]
$SUFFIX = {"LINEAR": "", "MINMAX": "_minmax"}[ACTIVATION]
$PARAMS = {"LINEAR": "xnn_f32_default_params", "MINMAX": "xnn_f32_minmax_params"}[ACTIVATION]
void xnn_f32_v${OP.lower()}${SUFFIX}_ukernel__sse_x${BATCH_TILE}(
    size_t batch,
    const float* input_a,
    const float* input_b,
    float* output,
    const union ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input_a != NULL);
  assert(input_b != NULL);
  assert(output != NULL);

  $if ACTIVATION == "MINMAX":
    const __m128 vy_min = _mm_load_ps(params->sse.min);
    const __m128 vy_max = _mm_load_ps(params->sse.max);

  $if BATCH_TILE > 4:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      const __m128 va${ABC[0:4]} = _mm_loadu_ps(input_a);
      $for N in range(4, BATCH_TILE, 4):
        const __m128 va${ABC[N:N+4]} = _mm_loadu_ps(input_a + ${N});
      input_a += ${BATCH_TILE};

      const __m128 vb${ABC[0:4]} = _mm_loadu_ps(input_b);
      $for N in range(4, BATCH_TILE, 4):
        const __m128 vb${ABC[N:N+4]} = _mm_loadu_ps(input_b + ${N});
      input_b += ${BATCH_TILE};

      $for N in range(0, BATCH_TILE, 4):
        __m128 vy${ABC[N:N+4]} = ${_MM_OP_PS}(va${ABC[N:N+4]}, vb${ABC[N:N+4]});

      $if OP == "SQRDIFF":
        $for N in range(0, BATCH_TILE, 4):
          vy${ABC[N:N+4]} = _mm_mul_ps(vy${ABC[N:N+4]}, vy${ABC[N:N+4]});

      $if ACTIVATION == "MINMAX":
        $for N in range(0, BATCH_TILE, 4):
          vy${ABC[N:N+4]} = _mm_max_ps(vy${ABC[N:N+4]}, vy_min);

        $for N in range(0, BATCH_TILE, 4):
          vy${ABC[N:N+4]} = _mm_min_ps(vy${ABC[N:N+4]}, vy_max);

      _mm_storeu_ps(output, vy${ABC[0:4]});
      $for N in range(4, BATCH_TILE, 4):
        _mm_storeu_ps(output + ${N}, vy${ABC[N:N+4]});
      output += ${BATCH_TILE};
    }
  for (; batch >= 4 * sizeof(float); batch -= 4 * sizeof(float)) {
    const __m128 va = _mm_loadu_ps(input_a);
    input_a += 4;

    const __m128 vb = _mm_loadu_ps(input_b);
    input_b += 4;

    __m128 vy = ${_MM_OP_PS}(va, vb);
    $if OP == "SQRDIFF":
      vy = _mm_mul_ps(vy, vy);
    $if ACTIVATION == "MINMAX":
      vy = _mm_max_ps(vy, vy_min);
      vy = _mm_min_ps(vy, vy_max);
    _mm_storeu_ps(output, vy);
    output += 4;
  }
  if XNN_UNLIKELY(batch != 0) {
    const __m128 va = _mm_loadu_ps(input_a);
    const __m128 vb = _mm_loadu_ps(input_b);

    __m128 vy = ${_MM_OP_PS}(va, vb);
    $if OP == "SQRDIFF":
      vy = _mm_mul_ps(vy, vy);
    $if ACTIVATION == "MINMAX":
      vy = _mm_max_ps(vy, vy_min);
      vy = _mm_min_ps(vy, vy_max);
    if (batch & (2 * sizeof(float))) {
      _mm_storel_pi((__m64*) output, vy);
      vy = _mm_movehl_ps(vy, vy);
      output += 2;
    }
    if (batch & (1 * sizeof(float))) {
      _mm_store_ss(output, vy);
    }
  }
}
