// Copyright 2019 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 8 == 0
$assert BATCH_TILE >= 8
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["ADD", "DIV", "RDIV", "MAX", "MIN", "MUL", "SUB", "RSUB", "SQRDIFF"]
$assert ACTIVATION in ["LINEAR", "MINMAX"]
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/vbinary.h>


$_MM256_OP_PS = {
$  "ADD": lambda x: "_mm256_add_ps(%s, vb)" % x,
$  "DIV": lambda x: "_mm256_div_ps(%s, vb)" % x,
$  "RDIV": lambda x: "_mm256_div_ps(vb, %s)" % x,
$  "MAX": lambda x: "_mm256_max_ps(%s, vb)" % x,
$  "MIN": lambda x: "_mm256_min_ps(%s, vb)" % x,
$  "MUL": lambda x: "_mm256_mul_ps(%s, vb)" % x,
$  "SUB": lambda x: "_mm256_sub_ps(%s, vb)" % x,
$  "RSUB": lambda x: "_mm256_sub_ps(vb, %s)" % x,
$  "SQRDIFF": lambda x: "_mm256_sub_ps(%s, vb)" % x,
$}[OP]
$SUFFIX = {"LINEAR": "", "MINMAX": "_minmax"}[ACTIVATION]
$PARAMS = {"LINEAR": "xnn_f32_default_params", "MINMAX": "xnn_f32_minmax_params"}[ACTIVATION]
void xnn_f32_v${OP.lower()}c${SUFFIX}_ukernel__avx_x${BATCH_TILE}(
    size_t batch,
    const float* input_a,
    const float* input_b,
    float* output,
    const union ${PARAMS} params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input_a != NULL);
  assert(input_b != NULL);
  assert(output != NULL);

  $if ACTIVATION == "MINMAX":
    const __m256 vy_min = _mm256_load_ps(params->avx.min);
    const __m256 vy_max = _mm256_load_ps(params->avx.max);

  const __m256 vb = _mm256_broadcast_ss(input_b);
  for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
    const __m256 va${ABC[0:8]} = _mm256_loadu_ps(input_a);
    $for N in range(8, BATCH_TILE, 8):
      const __m256 va${ABC[N:N+8]} = _mm256_loadu_ps(input_a + ${N});
    input_a += ${BATCH_TILE};

    $for N in range(0, BATCH_TILE, 8):
      __m256 vy${ABC[N:N+8]} = ${_MM256_OP_PS("va" + ABC[N:N+8])};

    $if OP == "SQRDIFF":
      $for N in range(0, BATCH_TILE, 8):
        vy${ABC[N:N+8]} = _mm256_mul_ps(vy${ABC[N:N+8]}, vy${ABC[N:N+8]});

    $if ACTIVATION == "MINMAX":
      $for N in range(0, BATCH_TILE, 8):
        vy${ABC[N:N+8]} = _mm256_max_ps(vy${ABC[N:N+8]}, vy_min);

      $for N in range(0, BATCH_TILE, 8):
        vy${ABC[N:N+8]} = _mm256_min_ps(vy${ABC[N:N+8]}, vy_max);

    _mm256_storeu_ps(output, vy${ABC[0:8]});
    $for N in range(8, BATCH_TILE, 8):
      _mm256_storeu_ps(output + ${N}, vy${ABC[N:N+8]});
    output += ${BATCH_TILE};
  }
  $if BATCH_TILE > 8:
    for (; batch >= 8 * sizeof(float); batch -= 8 * sizeof(float)) {
      const __m256 va = _mm256_loadu_ps(input_a);
      input_a += 8;

      __m256 vy = ${_MM256_OP_PS("va")};
      $if OP == "SQRDIFF":
        vy = _mm256_mul_ps(vy, vy);
      $if ACTIVATION == "MINMAX":
        vy = _mm256_max_ps(vy, vy_min);
        vy = _mm256_min_ps(vy, vy_max);
      _mm256_storeu_ps(output, vy);
      output += 8;
    }
  if XNN_UNLIKELY(batch != 0) {
    assert(batch >= 1 * sizeof(float));
    assert(batch <= 7 * sizeof(float));
    const __m256i vmask = _mm256_loadu_si256((const __m256i*) ((uintptr_t) &params->avx.mask_table[7] - batch));

    const __m256 va = _mm256_maskload_ps(input_a, vmask);

    __m256 vy = ${_MM256_OP_PS("va")};
    $if OP == "SQRDIFF":
      vy = _mm256_mul_ps(vy, vy);
    $if ACTIVATION == "MINMAX":
      vy = _mm256_max_ps(vy, vy_min);
      vy = _mm256_min_ps(vy, vy_max);

    __m128 vy_lo = _mm256_castps256_ps128(vy);
    if (batch & (4 * sizeof(float))) {
      _mm_storeu_ps(output, vy_lo);
      vy_lo = _mm256_extractf128_ps(vy, 1);
      output += 4;
    }
    if (batch & (2 * sizeof(float))) {
      _mm_storel_pi((__m64*) output, vy_lo);
      vy_lo = _mm_movehl_ps(vy_lo, vy_lo);
      output += 2;
    }
    if (batch & (1 * sizeof(float))) {
      _mm_store_ss(output, vy_lo);
    }
  }
}
