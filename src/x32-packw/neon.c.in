// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR >= 4
$assert KR >= 4

#include <assert.h>

#include <xnnpack/math.h>
#include <xnnpack/packw.h>

#include <arm_neon.h>


void xnn_x32_packw_gemm_goi_ukernel_x${NR}__neon(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  const uint32_t* weights,
  const uint32_t* bias,
  uint32_t* packed_weights,
  size_t extra_bytes,
  const void* params)
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});   // This kernel is for NR=${NR}
  assert(kr == 1);
  assert(sr == 1);
  assert(nr >= sr);
  assert(weights != NULL);
  assert(packed_weights != NULL);

  $for N in range(0,NR,4):
    $for K in range(0,KR,4):
      uint32x4x4_t v${N}${K};
      $for NN in range(0,4):
        v${N}${K}.val[${NN}] = vdupq_n_u32(0);

  do {
    // NC main loop multiple of ${NR}
    const uint32_t* w = weights;
    size_t n = nc;
    if XNN_LIKELY(n >= ${NR}) {
      do {
        if XNN_LIKELY(bias != NULL) {
          $for N in range(0,NR,4):
            uint32x4_t vb${N} = vld1q_u32(bias + ${N});
          $for N in range(0,NR,4):
            vst1q_u32(packed_weights + ${N}, vb${N});
          bias += ${NR};
        }
        packed_weights += ${NR};

        const uint32_t* w0 = w;
        $for N in range(1, NR):
          const uint32_t* w${N} = w${N-1} + kc;

        // KC main loop multiple of ${NR}x${KR}
        size_t k = kc;
        for (; k >= ${KR}; k -= ${KR}) {
          $for N in range(0,NR,4):
            $for NN in range(0,4):
              $for K in range(0,KR,4):
                v${N}${K} = vld4q_lane_u32(w${N+NN} + ${K}, v${N}${K}, ${NN});
              w${N+NN} += ${KR};
          $for K in range(0,KR,4):
            $for NN in range(0,4):
              $for N in range(0,NR,4):
                vst1q_u32(packed_weights + ${N+NN*NR+K*KR}, v${N}${K}.val[${NN}]);
          packed_weights += ${NR*KR};
        }

        // KC remainder
        for (; k >= 1; --k) {
          $for N in range(0,NR,4):
            $for NN in range(0,4):
              $for K in range(0,KR,4):
                v${N}${K}.val[0] = vld1q_lane_u32(w${N+NN} + ${K}, v${N}${K}.val[0], ${NN});
              w${N+NN} += ${KR//4};
          $for K in range(0,KR,4):
            $for N in range(0,NR,4):
              vst1q_u32(packed_weights + ${N+K*KR}, v${N}${K}.val[0]);
          packed_weights += ${NR*KR//4};
        }
        packed_weights = (uint32_t*) ((uintptr_t) packed_weights + extra_bytes);
        w = w${NR-1};
        n -= ${NR};
      } while (n >= ${NR});
    }

    if XNN_UNLIKELY(n != 0) {
      $if NR == 2:
        // NC remainder of 1
        if XNN_LIKELY(bias != NULL) {
          *packed_weights = *bias++;
        }
        packed_weights += ${NR};
        size_t k = kc;
        do {
          *packed_weights = *w++;
          packed_weights += ${NR};
        } while (--k);

        packed_weights = (uint32_t*) ((uintptr_t) packed_weights + extra_bytes);
      $else:
        // NC remainder (1..${NR-1})
        if XNN_LIKELY(bias != NULL) {
          size_t nb = n;
          do {
            *packed_weights++  = *bias++;
          } while (--nb != 0);
          packed_weights += (${NR} - n);
        } else {
          packed_weights += ${NR};
        }

        size_t k = kc;
        do {
          const uint32_t* wn = w;
          size_t nw = n;
          do {
            *packed_weights++ = wn[0];
            wn += kc;
          } while (--nw != 0);
          ++w;
          packed_weights += (${NR} - n);
        } while (--k);
        packed_weights = (uint32_t*) ((uintptr_t) packed_weights + extra_bytes);
    }
    weights += nc * kc;
  } while (--g != 0);
}
